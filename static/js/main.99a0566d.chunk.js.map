{"version":3,"sources":["content/Task.js","content/TaskList.js","content/TasksToDo.js","content/TasksDone.js","content/AddTask.js","content/App.js","serviceWorker.js","index.js"],"names":["Task","props","className","task","priority","done","name","date","onClick","changeStatus","id","delete","finishDate","TaskList","tasks","map","key","sort","a","b","TasksToDo","TaskToDoValue","filter","length","TasksDone","TaskDoneValue","AddTask","state","accepted","Date","getFullYear","getMonth","getDate","handleChange","e","target","setState","value","handleClick","preventDefault","addNewTask","noValidate","htmlFor","onChange","this","type","checked","Component","App","taskDone","deleteTask","index","findIndex","splice","i","forEach","console","log","handleAddTask","newTask","taskToAdd","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99a0566d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Task.css';\r\nconst Task = props => {\r\n   return (\r\n      <>\r\n         <h5 className={((props.task.priority && !props.task.done) ? \"priority\" : \"normal\") + ((props.task.done) ? \"done\" : \"\")}>{props.task.name} do</h5>\r\n         <h5>: {props.task.date} </h5>\r\n         {!props.task.done ? <button onClick={() => props.changeStatus(props.task.id)}>done</button> : null}\r\n         <button onClick={() => props.delete(props.task.id)}>x</button><br />\r\n         {props.task.finishDate ? <p><h6>wykonano dnia({props.task.finishDate})</h6><br /></p> : null}\r\n\r\n      </>\r\n   );\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task'\r\n\r\nconst TaskList = props => {\r\n   const tasks = props.tasks.map(task => {\r\n      if (props.done === task.done) {\r\n         return <Task changeStatus={props.changeStatus}\r\n            delete={props.delete} key={task.id} task={task} />\r\n      }\r\n\r\n   })\r\n   return (\r\n      <div>{tasks.sort((a, b) => {\r\n         if (a.name > b.name) {\r\n            return -1\r\n         }\r\n         if (a.name < b.name) {\r\n            return 1\r\n         }\r\n         return 0\r\n      })}</div>\r\n   );\r\n}\r\n\r\nexport default TaskList;","import React from 'react';\r\nimport TaskList from './TaskList'\r\nconst TasksToDo = props => {\r\n   const TaskToDoValue = props.tasks.filter(task => {\r\n      if (!task.done) {\r\n         return task\r\n      }\r\n   }).length\r\n   return (\r\n\r\n      <article>\r\n         <header>\r\n            <h2>Zadania do zrobienia({TaskToDoValue})</h2>\r\n         </header>\r\n         <section>\r\n            <TaskList changeStatus={props.changeStatus}\r\n               delete={props.delete} done={false} tasks={props.tasks} />\r\n         </section>\r\n      </article>\r\n\r\n   );\r\n}\r\n\r\nexport default TasksToDo;","import React from 'react';\r\nimport TaskList from './TaskList'\r\nconst TasksDone = props => {\r\n   const TaskDoneValue = props.tasks.filter(task => {\r\n      if (task.done) {\r\n         return task\r\n      }\r\n   }).length\r\n   return (\r\n      <article>\r\n         <header>\r\n            <h3>zadania zronione({TaskDoneValue})</h3>\r\n         </header>\r\n         <section>\r\n            <TaskList done={true} tasks={props.tasks} delete={props.delete} />\r\n         </section>\r\n      </article>\r\n\r\n   );\r\n}\r\n\r\nexport default TasksDone;","import React, { Component } from 'react';\r\nclass AddTask extends Component {\r\n   state = {\r\n      task: \"\",\r\n      accepted: false,\r\n      date: `${(new Date()).getFullYear()}-${(((new Date()).getMonth() + 1) > 9 ? ((new Date()).getMonth() + 1) : (\"0\" + ((new Date()).getMonth() + 1)))}-${(new Date()).getDate()}`\r\n   }\r\n   handleChange = (e) => {\r\n      const name = e.target.name\r\n      if (name === \"accepted\") {\r\n         this.setState({\r\n            [name]: !this.state.accepted\r\n         })\r\n      } else {\r\n         this.setState({\r\n            [name]: e.target.value\r\n         })\r\n      }\r\n   }\r\n   handleClick = (e) => {\r\n      e.preventDefault()\r\n      if (this.state.task.length > 3) {\r\n         this.props.addNewTask(this.state)\r\n         this.setState({\r\n            task: \"\",\r\n            accepted: false,\r\n         })\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <>\r\n            < form noValidate >\r\n\r\n               <label htmlFor=\"newTask\">\r\n                  <input\r\n                     onChange={this.handleChange}\r\n                     type=\"text\"\r\n                     id=\"newTask\"\r\n                     name=\"task\"\r\n                     value={this.state.task}\r\n                  />\r\n               </label>\r\n               <label htmlFor=\"priority\">\r\n                  <input\r\n                     onChange={this.handleChange}\r\n                     type=\"checkbox\"\r\n                     id=\"priority\"\r\n                     name=\"accepted\"\r\n                     checked={this.state.priority}\r\n                  />\r\n                  <h3>priorytet</h3>\r\n               </label><br />\r\n               <label htmlFor=\"date\">\r\n                  <h3>Do kiedy </h3>\r\n                  <input\r\n                     onChange={this.handleChange}\r\n                     type=\"date\"\r\n                     id=\"date\"\r\n                     name=\"date\"\r\n                     value={this.state.date}\r\n                  />\r\n               </label><br />\r\n               <button onClick={this.handleClick}>DODAJ</button>\r\n            </form >\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nexport default AddTask;\r\n","import React, { Component } from 'react';\nimport TasksToDo from './TasksToDo'\nimport TasksDone from './TasksDone'\nimport AddTask from './AddTask'\n\nimport './App.css';\nclass App extends Component {\n  state = {\n    tasks: [\n\n    ]\n  }\n  taskDone = (id) => {\n    const tasks = [...this.state.tasks]\n    tasks.map(task => {\n      if (task.id === id) {\n        task.done = true\n        task.finishDate = `${(new Date()).getFullYear()}-${(((new Date()).getMonth() + 1) > 9 ? ((new Date()).getMonth() + 1) : (\"0\" + ((new Date()).getMonth() + 1)))}-${(new Date()).getDate()}`\n      }\n    }\n    )\n    this.setState({\n      tasks\n    })\n  }\n  deleteTask = (id) => {\n    const tasks = [...this.state.tasks]\n    const index = tasks.findIndex(task => task.id === id)\n    tasks.splice(index, 1)\n    let i = 1;\n    tasks.forEach(task => {\n      task.id = i;\n      i++\n    });\n    this.setState({\n      tasks\n    })\n    console.log(tasks)\n  }\n  handleAddTask = (newTask) => {\n    const tasks = [...this.state.tasks]\n    const taskToAdd = {\n      id: tasks.length + 1,\n      name: newTask.task,\n      priority: newTask.accepted,\n      date: newTask.date,\n      done: false,\n      finishDate: null\n    }\n    tasks.concat(taskToAdd)\n    this.setState({\n      tasks: tasks.concat(taskToAdd)\n    })\n  }\n  render() {\n    return (\n      <>\n        <h1>TO DO APP</h1>\n        <div className=\"line\"></div>\n        <h2>Dodaj zadanie</h2>\n        <AddTask addNewTask={this.handleAddTask} />\n        <div className=\"line\"></div>\n        <TasksToDo tasks={this.state.tasks} changeStatus={this.taskDone}\n          delete={this.deleteTask} />\n        <div className=\"line\"></div>\n        <TasksDone tasks={this.state.tasks} delete={this.deleteTask} />\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './content/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}